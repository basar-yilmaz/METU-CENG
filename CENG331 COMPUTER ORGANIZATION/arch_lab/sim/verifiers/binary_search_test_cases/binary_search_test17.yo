0x000:                      | .pos 0x0
0x000: 30f4001f000000000000 | irmovq stack, %rsp
0x00a: 30f29b00000000000000 | irmovq $155, %rdx #queried value
0x014: 30f70810000000000000 | irmovq array_begin, %rdi
0x01e: 30f69010000000000000 | irmovq array_end, %rsi
0x028: 803200000000000000   | call binary_search
0x031: 00                   | halt
                            | 
                            | 
0x032:                      | binary_search:
                            |     # check if end - begin > 0 : else return 1
0x032: 2061                 |     rrmovq %rsi ,%rcx # current end is rcx    
0x034: 6171                 |     subq %rdi, %rcx # end - begin
0x036: 30fe1000000000000000 |     irmovq $16, %r14
0x040: 67e1                 |     dvvq %r14, %rcx 
0x042: 30fe0800000000000000 |     irmovq $8, %r14
0x04c: 65e1                 |     mllq %r14, %rcx # %rcx = (end - begin) / 2 
0x04e: 6071                 |     addq %rdi, %rcx # %rcx = begin + ((end - begin) >> 1)
0x050: 705900000000000000   |     jmp firstIf
                            |     
0x059:                      | firstIf:
0x059: 2010                 |     rrmovq %rcx, %rax # %rax = mid
0x05b: 2073                 |     rrmovq %rdi, %rbx # %rbx =  init begin
0x05d: 2079                 |     rrmovq %rdi, %r9 # %r9 = begin
0x05f: 2068                 |     rrmovq %rsi, %r8 # %r8 = end
0x061: 6189                 |     subq %r8, %r9 # begin - end
0x063: 759600000000000000   |     jge base_case_1 # if begin >= end early return
                            | 
                            |     # calculate *mid
0x06c: 50c00000000000000000 |     mrmovq 0(%rax), %r12 # %r12 stores *mid now
0x076: 612c                 |     subq %rdx, %r12 # %r12 = *mid - value
                            | 
0x078: 73a100000000000000   |     je base_case_2 # *mid == value
0x081: 72bc00000000000000   |     jl rec1 # *mid < value 
                            | 
0x08a: 2006                 |     rrmovq %rax, %rsi
0x08c: 803200000000000000   |     call binary_search
0x095: 90                   |     ret
                            | 
0x096:                      | base_case_1:
0x096: 30f0ffffffffffffffff |     irmovq $-1, %rax
0x0a0: 90                   |     ret
                            | 
0x0a1:                      | base_case_2: # *mid == value    
0x0a1: 6170                 |     subq %rdi, %rax # mid - begin 
0x0a3: 30fd0800000000000000 |     irmovq $8, %r13 
0x0ad: 60d0                 |     addq %r13, %rax # mid - begin + 1
0x0af: 30fd0800000000000000 |     irmovq $8, %r13 
0x0b9: 67d0                 |     dvvq %r13, %rax
0x0bb: 90                   |     ret
                            | 
                            | # *mid < value
0x0bc:                      | rec1:   
0x0bc: a01f                 |     pushq %rcx # push mid to stack
0x0be: a03f                 |     pushq %rbx # push begin to stack
0x0c0: 30fd0800000000000000 |     irmovq $8, %r13 
0x0ca: 60d1                 |     addq %r13, %rcx
0x0cc: 2017                 |     rrmovq %rcx, %rdi # mid + 1
0x0ce: 803200000000000000   |     call binary_search # tmp = %rax
0x0d7: b03f                 |     popq %rbx # get begin from stack
0x0d9: b01f                 |     popq %rcx # get mid from stack
0x0db: 30fd0100000000000000 |     irmovq $1, %r13 
0x0e5: 600d                 |     addq %rax, %r13 # check tmp + 1 == 0
0x0e7: 74f100000000000000   |     jne l1 # tmp == -1
0x0f0: 90                   |     ret
                            |     
0x0f1:                      | l1: # tmp != 1
0x0f1: 30fd0800000000000000 |     irmovq $8, %r13
0x0fb: 65d0                 |     mllq %r13, %rax # we get %rax as 1 not 8
0x0fd: 6010                 |     addq %rcx, %rax # tmp + mid
0x0ff: 6130                 |     subq %rbx, %rax # tmp + mid - begin
0x101: 30fd0800000000000000 |     irmovq $8, %r13 # tmp + mid - begin + 1
0x10b: 60d0                 |     addq %r13, %rax 
0x10d: 30fd0800000000000000 |     irmovq $8, %r13 
0x117: 67d0                 |     dvvq %r13, %rax 
0x119: 90                   |     ret
                            | 
                            | 
                            | 
0x1008:                      | .pos 0x1008
0x1008:                      | array_begin:
0x1008:6500000000000000      | .quad 101
0x1010:6c00000000000000      | .quad 108
0x1018:6e00000000000000      | .quad 110
0x1020:7300000000000000      | .quad 115
0x1028:7800000000000000      | .quad 120
0x1030:8c00000000000000      | .quad 140
0x1038:9000000000000000      | .quad 144
0x1040:9300000000000000      | .quad 147
0x1048:9500000000000000      | .quad 149
0x1050:9600000000000000      | .quad 150
0x1058:9a00000000000000      | .quad 154
0x1060:9b00000000000000      | .quad 155
0x1068:af00000000000000      | .quad 175
0x1070:b900000000000000      | .quad 185
0x1078:c000000000000000      | .quad 192
0x1080:c100000000000000      | .quad 193
0x1088:c600000000000000      | .quad 198
0x1090:                      | array_end:
0x1090:0000000000000000      | .quad 0
0x1f00:                      | .pos 0x1F00
0x1f00:                      | stack:
0x1f00:0000000000000000      | .quad 0
                             | 
